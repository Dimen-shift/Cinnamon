#include <iostream>
#include "maindefine.h"
#include "Perft.h"
#include "Uci.h"
#include "GenMoves.h"
#include "Test.h"
#include <unistd.h>
void
dispose (  ) {
  free ( Bits::ROTATE_LEFT );
  free ( Bits::ROTATE_RIGHT );
  free ( Bits::BITCOUNT );
}

void
start (  ) {
#ifdef DEBUG_MODE
  cout << "DEBUG_MODE\n";
#endif
#ifndef NULL_MODE
  cout << "NO NULL_MODE\n";
#endif
#ifndef FP_MODE
  cout << "NO FP_MODE\n";
#endif
  Bits::initBitCount (  );
  srand ( time ( NULL ) );
}

#ifdef TEST_MODE
int
main ( int argc, char **argv ) {
  start (  );
  Test t;

  //t.test_eval_crafty_tuning("/home/geko/chess/book1.epd", false);       return 0;
  //t.test_eval_crafty("/home/geko/chess/openings.epd");  return 0;
  //t.extract_end_book(EPD_FILE);
  int maxTimeMillsec = 5000;
  t.test_epd ( "epd/wac.epd", maxTimeMillsec );
  t.test_epd ( "epd/sbd.epd", maxTimeMillsec );
  t.test_epd ( "epd/kaufman.epd", maxTimeMillsec );
  t.test_epd ( "epd/zugzwang.epd", maxTimeMillsec );
  t.test_epd ( "epd/bk.epd", maxTimeMillsec );
  t.test_epd ( "epd/mate.epd", maxTimeMillsec );	//generated by http://www.frayn.net/beowulf/matetest.zip
  t.test_epd ( "epd/arasan12.epd", maxTimeMillsec );
}
#else

#ifdef PERFT_MODE
int
main ( int argc, char **argv ) {	//gcc perft
  start (  );
  char opt;
  int nCpu = 0;
  int perftDepth = 0;
  char *fen = INITIAL_FEN;
  int PERFT_HASH_SIZE = 0;	//16777213;
  while ( ( opt = getopt ( argc, argv, "d:p:h:f:" ) ) != -1 ) {
    switch ( opt ) {
    case 'd':			//depth
      perftDepth = atoi ( optarg );
      break;
    case 'p':			//N cpu
      nCpu = atoi ( optarg );
      break;
    case 'h':			//hash
      PERFT_HASH_SIZE = atoi ( optarg );
      break;
    case 'f':			//fen
      fen = optarg;
      break;
    }
  }

  if ( perftDepth > MAX_PLY || perftDepth <= 0 )
    perftDepth = 3;
  if ( nCpu > 8 || nCpu <= 0 )
    nCpu = 1;
  cout << "-d depth\n-p nCpu\n-h hash size (Mb)\n-f FEN" << endl;
  cout << "butterfly -d " << perftDepth << " -p " << nCpu << " -h " << PERFT_HASH_SIZE << " -f \"" << fen << "\"" << endl;

  RootPerft *p = new RootPerft ( fen, perftDepth, nCpu, PERFT_HASH_SIZE );
  delete p;

  dispose (  );
  return 0;
}
#else
int
main ( int argc, char **argv ) {	//gcc
  char opt;
  char *iniFile = NULL;
  while ( ( opt = getopt ( argc, argv, "w:r:" ) ) != -1 ) {
    switch ( opt ) {
    case 'r':
      iniFile = optarg;
      break;
    case 'w':
      Eval eval ( NULL, NULL );
      eval.writeParam ( optarg, 1, false );
      return 0;
    }
  }
  start (  );
  Uci *uci = new Uci ( iniFile );
  delete uci;
  dispose (  );
  return 0;
}
#endif
#endif
