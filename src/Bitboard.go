/*
    Cinnamon UCI chess engine
    Copyright (C) Giuseppe Cannella

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

package main


//Kindergarten
type Bitboard struct {
	BITBOARD_DIAGONAL     [64][256]uint64
	BITBOARD_ANTIDIAGONAL [64][256]uint64
	BITBOARD_FILE         [64][256]uint64
	BITBOARD_RANK         [64][256]uint64
	tmpStruct             *_Ttmp
}

var MASK_BIT_SET_VERT_LOWER = []uint64{
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000001, 0x0000000000000002, 0x0000000000000004, 0x0000000000000008, 0x0000000000000010, 0x0000000000000020, 0x0000000000000040, 0x0000000000000080,
	0x0000000000000101, 0x0000000000000202, 0x0000000000000404, 0x0000000000000808, 0x0000000000001010, 0x0000000000002020, 0x0000000000004040, 0x0000000000008080,
	0x0000000000010101, 0x0000000000020202, 0x0000000000040404, 0x0000000000080808, 0x0000000000101010, 0x0000000000202020, 0x0000000000404040, 0x0000000000808080,
	0x0000000001010101, 0x0000000002020202, 0x0000000004040404, 0x0000000008080808, 0x0000000010101010, 0x0000000020202020, 0x0000000040404040, 0x0000000080808080,
	0x0000000101010101, 0x0000000202020202, 0x0000000404040404, 0x0000000808080808, 0x0000001010101010, 0x0000002020202020, 0x0000004040404040, 0x0000008080808080,
	0x0000010101010101, 0x0000020202020202, 0x0000040404040404, 0x0000080808080808, 0x0000101010101010, 0x0000202020202020, 0x0000404040404040, 0x0000808080808080,
	0x0001010101010101, 0x0002020202020202, 0x0004040404040404, 0x0008080808080808, 0x0010101010101010, 0x0020202020202020, 0x0040404040404040, 0x0080808080808080,
};

var MASK_BIT_SET_VERT_UPPER = []uint64{

	0x0101010101010100, 0x0202020202020200, 0x0404040404040400, 0x0808080808080800, 0x1010101010101000, 0x2020202020202000, 0x4040404040404000, 0x8080808080808000,
	0x0101010101010000, 0x0202020202020000, 0x0404040404040000, 0x0808080808080000, 0x1010101010100000, 0x2020202020200000, 0x4040404040400000, 0x8080808080800000,
	0x0101010101000000, 0x0202020202000000, 0x0404040404000000, 0x0808080808000000, 0x1010101010000000, 0x2020202020000000, 0x4040404040000000, 0x8080808080000000,
	0x0101010100000000, 0x0202020200000000, 0x0404040400000000, 0x0808080800000000, 0x1010101000000000, 0x2020202000000000, 0x4040404000000000, 0x8080808000000000,
	0x0101010000000000, 0x0202020000000000, 0x0404040000000000, 0x0808080000000000, 0x1010100000000000, 0x2020200000000000, 0x4040400000000000, 0x8080800000000000,
	0x0101000000000000, 0x0202000000000000, 0x0404000000000000, 0x0808000000000000, 0x1010000000000000, 0x2020000000000000, 0x4040000000000000, 0x8080000000000000,
	0x0100000000000000, 0x0200000000000000, 0x0400000000000000, 0x0800000000000000, 0x1000000000000000, 0x2000000000000000, 0x4000000000000000, 0x8000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
};

var MASK_BIT_SET_ORIZ_LEFT = []uint64{
	0x00000000000000fe, 0x00000000000000fc, 0x00000000000000f8, 0x00000000000000f0, 0x00000000000000e0, 0x00000000000000c0, 0x0000000000000080, 0x0000000000000000,
	0x000000000000fe00, 0x000000000000fc00, 0x000000000000f800, 0x000000000000f000, 0x000000000000e000, 0x000000000000c000, 0x0000000000008000, 0x0000000000000000,
	0x0000000000fe0000, 0x0000000000fc0000, 0x0000000000f80000, 0x0000000000f00000, 0x0000000000e00000, 0x0000000000c00000, 0x0000000000800000, 0x0000000000000000,
	0x00000000fe000000, 0x00000000fc000000, 0x00000000f8000000, 0x00000000f0000000, 0x00000000e0000000, 0x00000000c0000000, 0x0000000080000000, 0x0000000000000000,
	0x000000fe00000000, 0x000000fc00000000, 0x000000f800000000, 0x000000f000000000, 0x000000e000000000, 0x000000c000000000, 0x0000008000000000, 0x0000000000000000,
	0x0000fe0000000000, 0x0000fc0000000000, 0x0000f80000000000, 0x0000f00000000000, 0x0000e00000000000, 0x0000c00000000000, 0x0000800000000000, 0x0000000000000000,
	0x00fe000000000000, 0x00fc000000000000, 0x00f8000000000000, 0x00f0000000000000, 0x00e0000000000000, 0x00c0000000000000, 0x0080000000000000, 0x0000000000000000,
	0xfe00000000000000, 0xfc00000000000000, 0xf800000000000000, 0xf000000000000000, 0xe000000000000000, 0xc000000000000000, 0x8000000000000000, 0x0000000000000000,
};

var MASK_BIT_SET_ORIZ_RIGHT = []uint64{
	0x0000000000000000, 0x0000000000000001, 0x0000000000000003, 0x0000000000000007, 0x000000000000000f, 0x000000000000001f, 0x000000000000003f, 0x000000000000007f,
	0x0000000000000000, 0x0000000000000100, 0x0000000000000300, 0x0000000000000700, 0x0000000000000f00, 0x0000000000001f00, 0x0000000000003f00, 0x0000000000007f00,
	0x0000000000000000, 0x0000000000010000, 0x0000000000030000, 0x0000000000070000, 0x00000000000f0000, 0x00000000001f0000, 0x00000000003f0000, 0x00000000007f0000,
	0x0000000000000000, 0x0000000001000000, 0x0000000003000000, 0x0000000007000000, 0x000000000f000000, 0x000000001f000000, 0x000000003f000000, 0x000000007f000000,
	0x0000000000000000, 0x0000000100000000, 0x0000000300000000, 0x0000000700000000, 0x0000000f00000000, 0x0000001f00000000, 0x0000003f00000000, 0x0000007f00000000,
	0x0000000000000000, 0x0000010000000000, 0x0000030000000000, 0x0000070000000000, 0x00000f0000000000, 0x00001f0000000000, 0x00003f0000000000, 0x00007f0000000000,
	0x0000000000000000, 0x0001000000000000, 0x0003000000000000, 0x0007000000000000, 0x000f000000000000, 0x001f000000000000, 0x003f000000000000, 0x007f000000000000,
	0x0000000000000000, 0x0100000000000000, 0x0300000000000000, 0x0700000000000000, 0x0f00000000000000, 0x1f00000000000000, 0x3f00000000000000, 0x7f00000000000000,
};

var MASK_BIT_SET_LEFT_LOWER = []uint64{
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000002, 0x0000000000000004, 0x0000000000000008, 0x0000000000000010, 0x0000000000000020, 0x0000000000000040, 0x0000000000000080, 0x0000000000000000,
	0x0000000000000204, 0x0000000000000408, 0x0000000000000810, 0x0000000000001020, 0x0000000000002040, 0x0000000000004080, 0x0000000000008000, 0x0000000000000000,
	0x0000000000020408, 0x0000000000040810, 0x0000000000081020, 0x0000000000102040, 0x0000000000204080, 0x0000000000408000, 0x0000000000800000, 0x0000000000000000,
	0x0000000002040810, 0x0000000004081020, 0x0000000008102040, 0x0000000010204080, 0x0000000020408000, 0x0000000040800000, 0x0000000080000000, 0x0000000000000000,
	0x0000000204081020, 0x0000000408102040, 0x0000000810204080, 0x0000001020408000, 0x0000002040800000, 0x0000004080000000, 0x0000008000000000, 0x0000000000000000,
	0x0000020408102040, 0x0000040810204080, 0x0000081020408000, 0x0000102040800000, 0x0000204080000000, 0x0000408000000000, 0x0000800000000000, 0x0000000000000000,
	0x0002040810204080, 0x0004081020408000, 0x0008102040800000, 0x0010204080000000, 0x0020408000000000, 0x0040800000000000, 0x0080000000000000, 0x0000000000000000,
};

var MASK_BIT_SET_LEFT_UPPER = []uint64{
	0x0000000000000000, 0x0000000000000100, 0x0000000000010200, 0x0000000001020400, 0x0000000102040800, 0x0000010204081000, 0x0001020408102000, 0x0102040810204000,
	0x0000000000000000, 0x0000000000010000, 0x0000000001020000, 0x0000000102040000, 0x0000010204080000, 0x0001020408100000, 0x0102040810200000, 0x0204081020400000,
	0x0000000000000000, 0x0000000001000000, 0x0000000102000000, 0x0000010204000000, 0x0001020408000000, 0x0102040810000000, 0x0204081020000000, 0x0408102040000000,
	0x0000000000000000, 0x0000000100000000, 0x0000010200000000, 0x0001020400000000, 0x0102040800000000, 0x0204081000000000, 0x0408102000000000, 0x0810204000000000,
	0x0000000000000000, 0x0000010000000000, 0x0001020000000000, 0x0102040000000000, 0x0204080000000000, 0x0408100000000000, 0x0810200000000000, 0x1020400000000000,
	0x0000000000000000, 0x0001000000000000, 0x0102000000000000, 0x0204000000000000, 0x0408000000000000, 0x0810000000000000, 0x1020000000000000, 0x2040000000000000,
	0x0000000000000000, 0x0100000000000000, 0x0200000000000000, 0x0400000000000000, 0x0800000000000000, 0x1000000000000000, 0x2000000000000000, 0x4000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
};

var MASK_BIT_SET_RIGHT_LOWER = []uint64{
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000001, 0x0000000000000002, 0x0000000000000004, 0x0000000000000008, 0x0000000000000010, 0x0000000000000020, 0x0000000000000040,
	0x0000000000000000, 0x0000000000000100, 0x0000000000000201, 0x0000000000000402, 0x0000000000000804, 0x0000000000001008, 0x0000000000002010, 0x0000000000004020,
	0x0000000000000000, 0x0000000000010000, 0x0000000000020100, 0x0000000000040201, 0x0000000000080402, 0x0000000000100804, 0x0000000000201008, 0x0000000000402010,
	0x0000000000000000, 0x0000000001000000, 0x0000000002010000, 0x0000000004020100, 0x0000000008040201, 0x0000000010080402, 0x0000000020100804, 0x0000000040201008,
	0x0000000000000000, 0x0000000100000000, 0x0000000201000000, 0x0000000402010000, 0x0000000804020100, 0x0000001008040201, 0x0000002010080402, 0x0000004020100804,
	0x0000000000000000, 0x0000010000000000, 0x0000020100000000, 0x0000040201000000, 0x0000080402010000, 0x0000100804020100, 0x0000201008040201, 0x0000402010080402,
	0x0000000000000000, 0x0001000000000000, 0x0002010000000000, 0x0004020100000000, 0x0008040201000000, 0x0010080402010000, 0x0020100804020100, 0x0040201008040201,
};

var MASK_BIT_SET_RIGHT_UPPER = []uint64{
	0x8040201008040200, 0x0080402010080400, 0x0000804020100800, 0x0000008040201000, 0x0000000080402000, 0x0000000000804000, 0x0000000000008000, 0x0000000000000000,
	0x4020100804020000, 0x8040201008040000, 0x0080402010080000, 0x0000804020100000, 0x0000008040200000, 0x0000000080400000, 0x0000000000800000, 0x0000000000000000,
	0x2010080402000000, 0x4020100804000000, 0x8040201008000000, 0x0080402010000000, 0x0000804020000000, 0x0000008040000000, 0x0000000080000000, 0x0000000000000000,
	0x1008040200000000, 0x2010080400000000, 0x4020100800000000, 0x8040201000000000, 0x0080402000000000, 0x0000804000000000, 0x0000008000000000, 0x0000000000000000,
	0x0804020000000000, 0x1008040000000000, 0x2010080000000000, 0x4020100000000000, 0x8040200000000000, 0x0080400000000000, 0x0000800000000000, 0x0000000000000000,
	0x0402000000000000, 0x0804000000000000, 0x1008000000000000, 0x2010000000000000, 0x4020000000000000, 0x8040000000000000, 0x0080000000000000, 0x0000000000000000,
	0x0200000000000000, 0x0400000000000000, 0x0800000000000000, 0x1000000000000000, 0x2000000000000000, 0x4000000000000000, 0x8000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
};

var MASK_BIT_UNSET_RIGHT_UP = []uint64{
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000001, 0x0000000000000002, 0x0000000000000004, 0x0000000000000008, 0x0000000000000010, 0x0000000000000020, 0x0000000000000040,
	0x0000000000000000, 0x0000000000000100, 0x0000000000000201, 0x0000000000000402, 0x0000000000000804, 0x0000000000001008, 0x0000000000002010, 0x0000000000004020,
	0x0000000000000000, 0x0000000000010000, 0x0000000000020100, 0x0000000000040201, 0x0000000000080402, 0x0000000000100804, 0x0000000000201008, 0x0000000000402010,
	0x0000000000000000, 0x0000000001000000, 0x0000000002010000, 0x0000000004020100, 0x0000000008040201, 0x0000000010080402, 0x0000000020100804, 0x0000000040201008,
	0x0000000000000000, 0x0000000100000000, 0x0000000201000000, 0x0000000402010000, 0x0000000804020100, 0x0000001008040201, 0x0000002010080402, 0x0000004020100804,
	0x0000000000000000, 0x0000010000000000, 0x0000020100000000, 0x0000040201000000, 0x0000080402010000, 0x0000100804020100, 0x0000201008040201, 0x0000402010080402,
	0x0000000000000000, 0x0001000000000000, 0x0002010000000000, 0x0004020100000000, 0x0008040201000000, 0x0010080402010000, 0x0020100804020100, 0x0040201008040201,
};

var MASK_BIT_UNSET_RIGHT_DOWN = []uint64{
	0x8040201008040200, 0x0080402010080400, 0x0000804020100800, 0x0000008040201000, 0x0000000080402000, 0x0000000000804000, 0x0000000000008000, 0x0000000000000000,
	0x4020100804020000, 0x8040201008040000, 0x0080402010080000, 0x0000804020100000, 0x0000008040200000, 0x0000000080400000, 0x0000000000800000, 0x0000000000000000,
	0x2010080402000000, 0x4020100804000000, 0x8040201008000000, 0x0080402010000000, 0x0000804020000000, 0x0000008040000000, 0x0000000080000000, 0x0000000000000000,
	0x1008040200000000, 0x2010080400000000, 0x4020100800000000, 0x8040201000000000, 0x0080402000000000, 0x0000804000000000, 0x0000008000000000, 0x0000000000000000,
	0x0804020000000000, 0x1008040000000000, 0x2010080000000000, 0x4020100000000000, 0x8040200000000000, 0x0080400000000000, 0x0000800000000000, 0x0000000000000000,
	0x0402000000000000, 0x0804000000000000, 0x1008000000000000, 0x2010000000000000, 0x4020000000000000, 0x8040000000000000, 0x0080000000000000, 0x0000000000000000,
	0x0200000000000000, 0x0400000000000000, 0x0800000000000000, 0x1000000000000000, 0x2000000000000000, 0x4000000000000000, 0x8000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
};

var MASK_BIT_UNSET_LEFT_UP = []uint64{
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000002, 0x0000000000000004, 0x0000000000000008, 0x0000000000000010, 0x0000000000000020, 0x0000000000000040, 0x0000000000000080, 0x0000000000000000,
	0x0000000000000204, 0x0000000000000408, 0x0000000000000810, 0x0000000000001020, 0x0000000000002040, 0x0000000000004080, 0x0000000000008000, 0x0000000000000000,
	0x0000000000020408, 0x0000000000040810, 0x0000000000081020, 0x0000000000102040, 0x0000000000204080, 0x0000000000408000, 0x0000000000800000, 0x0000000000000000,
	0x0000000002040810, 0x0000000004081020, 0x0000000008102040, 0x0000000010204080, 0x0000000020408000, 0x0000000040800000, 0x0000000080000000, 0x0000000000000000,
	0x0000000204081020, 0x0000000408102040, 0x0000000810204080, 0x0000001020408000, 0x0000002040800000, 0x0000004080000000, 0x0000008000000000, 0x0000000000000000,
	0x0000020408102040, 0x0000040810204080, 0x0000081020408000, 0x0000102040800000, 0x0000204080000000, 0x0000408000000000, 0x0000800000000000, 0x0000000000000000,
	0x0002040810204080, 0x0004081020408000, 0x0008102040800000, 0x0010204080000000, 0x0020408000000000, 0x0040800000000000, 0x0080000000000000, 0x0000000000000000,
};

var MASK_BIT_UNSET_LEFT_DOWN = []uint64{
	0x0000000000000000, 0x0000000000000100, 0x0000000000010200, 0x0000000001020400, 0x0000000102040800, 0x0000010204081000, 0x0001020408102000, 0x0102040810204000,
	0x0000000000000000, 0x0000000000010000, 0x0000000001020000, 0x0000000102040000, 0x0000010204080000, 0x0001020408100000, 0x0102040810200000, 0x0204081020400000,
	0x0000000000000000, 0x0000000001000000, 0x0000000102000000, 0x0000010204000000, 0x0001020408000000, 0x0102040810000000, 0x0204081020000000, 0x0408102040000000,
	0x0000000000000000, 0x0000000100000000, 0x0000010200000000, 0x0001020400000000, 0x0102040800000000, 0x0204081000000000, 0x0408102000000000, 0x0810204000000000,
	0x0000000000000000, 0x0000010000000000, 0x0001020000000000, 0x0102040000000000, 0x0204080000000000, 0x0408100000000000, 0x0810200000000000, 0x1020400000000000,
	0x0000000000000000, 0x0001000000000000, 0x0102000000000000, 0x0204000000000000, 0x0408000000000000, 0x0810000000000000, 0x1020000000000000, 0x2040000000000000,
	0x0000000000000000, 0x0100000000000000, 0x0200000000000000, 0x0400000000000000, 0x0800000000000000, 0x1000000000000000, 0x2000000000000000, 0x4000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
};

var MASK_BIT_UNSET_DOWN = []uint64{
	0x0101010101010100, 0x0202020202020200, 0x0404040404040400, 0x0808080808080800, 0x1010101010101000, 0x2020202020202000, 0x4040404040404000, 0x8080808080808000,
	0x0101010101010000, 0x0202020202020000, 0x0404040404040000, 0x0808080808080000, 0x1010101010100000, 0x2020202020200000, 0x4040404040400000, 0x8080808080800000,
	0x0101010101000000, 0x0202020202000000, 0x0404040404000000, 0x0808080808000000, 0x1010101010000000, 0x2020202020000000, 0x4040404040000000, 0x8080808080000000,
	0x0101010100000000, 0x0202020200000000, 0x0404040400000000, 0x0808080800000000, 0x1010101000000000, 0x2020202000000000, 0x4040404000000000, 0x8080808000000000,
	0x0101010000000000, 0x0202020000000000, 0x0404040000000000, 0x0808080000000000, 0x1010100000000000, 0x2020200000000000, 0x4040400000000000, 0x8080800000000000,
	0x0101000000000000, 0x0202000000000000, 0x0404000000000000, 0x0808000000000000, 0x1010000000000000, 0x2020000000000000, 0x4040000000000000, 0x8080000000000000,
	0x0100000000000000, 0x0200000000000000, 0x0400000000000000, 0x0800000000000000, 0x1000000000000000, 0x2000000000000000, 0x4000000000000000, 0x8000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
};

var MASK_BIT_UNSET_UP = []uint64{
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000001, 0x0000000000000002, 0x0000000000000004, 0x0000000000000008, 0x0000000000000010, 0x0000000000000020, 0x0000000000000040, 0x0000000000000080,
	0x0000000000000101, 0x0000000000000202, 0x0000000000000404, 0x0000000000000808, 0x0000000000001010, 0x0000000000002020, 0x0000000000004040, 0x0000000000008080,
	0x0000000000010101, 0x0000000000020202, 0x0000000000040404, 0x0000000000080808, 0x0000000000101010, 0x0000000000202020, 0x0000000000404040, 0x0000000000808080,
	0x0000000001010101, 0x0000000002020202, 0x0000000004040404, 0x0000000008080808, 0x0000000010101010, 0x0000000020202020, 0x0000000040404040, 0x0000000080808080,
	0x0000000101010101, 0x0000000202020202, 0x0000000404040404, 0x0000000808080808, 0x0000001010101010, 0x0000002020202020, 0x0000004040404040, 0x0000008080808080,
	0x0000010101010101, 0x0000020202020202, 0x0000040404040404, 0x0000080808080808, 0x0000101010101010, 0x0000202020202020, 0x0000404040404040, 0x0000808080808080,
	0x0001010101010101, 0x0002020202020202, 0x0004040404040404, 0x0008080808080808, 0x0010101010101010, 0x0020202020202020, 0x0040404040404040, 0x0080808080808080,
};

var MASK_BIT_UNSET_LEFT = []uint64{
	0x0000000000000000, 0x0000000000000001, 0x0000000000000003, 0x0000000000000007, 0x000000000000000f, 0x000000000000001f, 0x000000000000003f, 0x000000000000007f,
	0x0000000000000000, 0x0000000000000100, 0x0000000000000300, 0x0000000000000700, 0x0000000000000f00, 0x0000000000001f00, 0x0000000000003f00, 0x0000000000007f00,
	0x0000000000000000, 0x0000000000010000, 0x0000000000030000, 0x0000000000070000, 0x00000000000f0000, 0x00000000001f0000, 0x00000000003f0000, 0x00000000007f0000,
	0x0000000000000000, 0x0000000001000000, 0x0000000003000000, 0x0000000007000000, 0x000000000f000000, 0x000000001f000000, 0x000000003f000000, 0x000000007f000000,
	0x0000000000000000, 0x0000000100000000, 0x0000000300000000, 0x0000000700000000, 0x0000000f00000000, 0x0000001f00000000, 0x0000003f00000000, 0x0000007f00000000,
	0x0000000000000000, 0x0000010000000000, 0x0000030000000000, 0x0000070000000000, 0x00000f0000000000, 0x00001f0000000000, 0x00003f0000000000, 0x00007f0000000000,
	0x0000000000000000, 0x0001000000000000, 0x0003000000000000, 0x0007000000000000, 0x000f000000000000, 0x001f000000000000, 0x003f000000000000, 0x007f000000000000,
	0x0000000000000000, 0x0100000000000000, 0x0300000000000000, 0x0700000000000000, 0x0f00000000000000, 0x1f00000000000000, 0x3f00000000000000, 0x7f00000000000000,
};

var MASK_BIT_UNSET_RIGHT = []uint64{
	0x00000000000000fe, 0x00000000000000fc, 0x00000000000000f8, 0x00000000000000f0, 0x00000000000000e0, 0x00000000000000c0, 0x0000000000000080, 0x0000000000000000,
	0x000000000000fe00, 0x000000000000fc00, 0x000000000000f800, 0x000000000000f000, 0x000000000000e000, 0x000000000000c000, 0x0000000000008000, 0x0000000000000000,
	0x0000000000fe0000, 0x0000000000fc0000, 0x0000000000f80000, 0x0000000000f00000, 0x0000000000e00000, 0x0000000000c00000, 0x0000000000800000, 0x0000000000000000,
	0x00000000fe000000, 0x00000000fc000000, 0x00000000f8000000, 0x00000000f0000000, 0x00000000e0000000, 0x00000000c0000000, 0x0000000080000000, 0x0000000000000000,
	0x000000fe00000000, 0x000000fc00000000, 0x000000f800000000, 0x000000f000000000, 0x000000e000000000, 0x000000c000000000, 0x0000008000000000, 0x0000000000000000,
	0x0000fe0000000000, 0x0000fc0000000000, 0x0000f80000000000, 0x0000f00000000000, 0x0000e00000000000, 0x0000c00000000000, 0x0000800000000000, 0x0000000000000000,
	0x00fe000000000000, 0x00fc000000000000, 0x00f8000000000000, 0x00f0000000000000, 0x00e0000000000000, 0x00c0000000000000, 0x0080000000000000, 0x0000000000000000,
	0xfe00000000000000, 0xfc00000000000000, 0xf800000000000000, 0xf000000000000000, 0xe000000000000000, 0xc000000000000000, 0x8000000000000000, 0x0000000000000000,
};

type _Ttmp struct {
	MASK_BIT_SET_NOBOUND_TMP       [64][64]uint64;
	MASK_BIT_SET_NOBOUND_COUNT_TMP [64][64]int8;
}

const (
	MAGIC_KEY_DIAG_ANTIDIAG uint64 = 0x101010101010101;
	MAGIC_KEY_FILE_RANK uint64 = 0x102040810204080;


)

func ( b Bitboard )getRankFile(position int, allpieces uint64) uint64 {

	//    ........            00000000
	//    ...q....            00010000
	//    ........            00010000
	//    ...r.p..    --->    11101100
	//    ........            00010000
	//    ........            00010000
	//    ...Q....            00010000
	//    ........            00000000

	return (b.BITBOARD_FILE[position][b.fileIdx(position, allpieces)]) |
		b.BITBOARD_RANK[position][b.rankIdx(position, allpieces)];
}

func ( b Bitboard ) getDiagonalAntiDiagonal(position int, allpieces uint64) uint64 {
	//    ........            00010000
	//    q.......            10100000
	//    .B......            00000000
	//    R.......    --->    10100000
	//    ........            00010000
	//    ........            00001000
	//    ........            00000100
	//    ........            00000010

	return b.BITBOARD_DIAGONAL[position][b.diagonalIdx(position, allpieces)] |
		b.BITBOARD_ANTIDIAGONAL[position][b.antiDiagonalIdx(position, allpieces)];
}

func ( b Bitboard )getCombination2(elements  []uint64) []uint64 {
	var res  []uint64;
	var v  []uint64;
	var bits uint64 = 0;

	for len1 := 1; len1 < len(elements) + 1; len1++ {
		v = b.combinations2(elements, len1);
		var k int = 0;
		for _, rr := range v {
			bits |= POW2[rr];
			k++;
			if k == len1 {
				res = append(res, bits)
				bits = 0;
				k = 0;
			}
		}
	}
	return res;
}

func ( b Bitboard )  rankIdx(position int, allpieces uint64) uint8 {
	return uint8((allpieces >> RANK_ATx8[position]) & 0xff);
}
func ( b Bitboard )  fileIdx(position int, allpieces uint64) uint8 {
	return uint8((((allpieces & FILE_[position]) * MAGIC_KEY_FILE_RANK) >> 56) & 0xff);
}
func ( b Bitboard )  diagonalIdx(position int, allpieces uint64) uint8 {
	return uint8((((allpieces & DIAGONAL[position]) * MAGIC_KEY_DIAG_ANTIDIAG) >> 56) & 0xff);
};

func ( b Bitboard )  antiDiagonalIdx(position int, allpieces uint64) uint8 {
	return uint8((((allpieces & ANTIDIAGONAL[position]) * MAGIC_KEY_DIAG_ANTIDIAG) >> 56) & 0xff);
}

func ( b Bitboard ) popolateColumn() {
	var combinationsColumn []uint64
	for pos := 0; pos < 64; pos++ {
		combinationsColumn = b.getCombination(FILE_[pos]);
		var allpieces uint64;
		for _, allpieces = range combinationsColumn {
			idx := b.fileIdx(pos, allpieces);
			b.BITBOARD_FILE[pos][idx] = b.performColumnShift(pos, allpieces) | b.performColumnCapture(pos, allpieces);
		}
	}
}

func ( b Bitboard ) popolateDiagonal() {
	var combinationsDiagonal []uint64
	for pos := 0; pos < 64; pos++ {
		combinationsDiagonal = b.getCombination(DIAGONAL[pos]);
		for _, allpieces := range combinationsDiagonal {
			idx := b.diagonalIdx(pos, allpieces);
			b.BITBOARD_DIAGONAL[pos][idx] = b.performDiagShift(pos, allpieces) | b.performDiagCapture(pos, allpieces);
		}
	}
}

func ( b Bitboard )  popolateAntiDiagonal() {
	var combinationsAntiDiagonal []uint64
	for pos := 0; pos < 64; pos++ {
		combinationsAntiDiagonal = b.getCombination(ANTIDIAGONAL[pos]);
		for _, allpieces := range combinationsAntiDiagonal {
			idx := b.antiDiagonalIdx(pos, allpieces);
			b.BITBOARD_ANTIDIAGONAL[pos][idx] = b.performAntiDiagShift(pos, allpieces) | b.performAntiDiagCapture(pos, allpieces);
		}
	}
}

func ( b Bitboard )  combinations(elems []uint64, len1 int, pos []uint64, depth int, margin int) []uint64 {
	var res []uint64;
	if depth >= len1 {
		for ii := 0; ii < len(pos); ii++ {
			res = append(res, elems[pos[ii]]);
		}
		return res;
	}

	if (( len(elems) - margin) < (len1 - depth)) {
		return res;
	}
	var ii uint64;
	for ii = uint64(margin); ii < uint64(len(elems)); ii++ {
		pos[depth] = ii;
		var A []uint64 = b.combinations(elems, len1, pos, depth + 1, int(ii + 1));
		res = append(res, A...);
		//res.insert(res.end(), A.begin(), A.end());
	}

	return res;
}

func ( b Bitboard )   combinations2(elems []uint64, len1 int) []uint64 {
	assert(len1 > 0 && len1 < len(elems), "a1");

	var positions = make([]uint64, len1)
	return b.combinations(elems, len1, positions, 0, 0);

}
func ( b Bitboard )  performDiagShift(position int, allpieces uint64) uint64 {
	var q uint64 = allpieces & MASK_BIT_UNSET_LEFT_UP[position];
	var k uint64;
	if q != 0 {
		k = b.tmpStruct.MASK_BIT_SET_NOBOUND_TMP[position][BITScanReverse(q)]
	} else {
		k = MASK_BIT_SET_LEFT_LOWER[position]
	};

	q = allpieces & MASK_BIT_UNSET_LEFT_DOWN[position];
	if q != 0 {
		k |= b.tmpStruct.MASK_BIT_SET_NOBOUND_TMP[position][BITScanForward(q)]
	} else {
		k |= MASK_BIT_SET_LEFT_UPPER[position]
	};

	return k;

}

func ( b Bitboard ) performDiagCapture(position int, allpieces uint64) uint64 {
	var k uint64 = 0;
	var bound int;
	var q uint64 = allpieces & MASK_BIT_UNSET_LEFT_UP[position];
	if q != 0 {
		bound = BITScanReverse(q);
		if allpieces & POW2[bound] != 0 {
			k |= POW2[bound];
		}
	}
	q = allpieces & MASK_BIT_UNSET_LEFT_DOWN[position];
	if q != 0 {
		bound = BITScanForward(q);
		if allpieces & POW2[bound] != 0 {
			k |= POW2[bound];
		}
	}

	return k;
}

func ( b Bitboard ) performAntiDiagCapture(position int, allpieces uint64) uint64 {
	var bound int;
	var k uint64 = 0;
	var q uint64 = allpieces & MASK_BIT_UNSET_RIGHT_UP[position];
	if q != 0 {
		bound = BITScanReverse(q);
		if (allpieces & POW2[bound] != 0) {
			k |= POW2[bound];
		}
	}
	q = allpieces & MASK_BIT_UNSET_RIGHT_DOWN[position];
	if q != 0 {
		bound = BITScanForward(q);
		if (allpieces & POW2[bound] != 0) {
			k |= POW2[bound];
		}
	}
	return k;
}
func ( b Bitboard ) performAntiDiagShift(position int, allpieces uint64) uint64 {
	var q uint64 = allpieces & MASK_BIT_UNSET_RIGHT_UP[position];
	var k uint64;
	if q != 0 {
		k = b.tmpStruct.MASK_BIT_SET_NOBOUND_TMP[position][BITScanReverse(q)]
	} else {
		k = MASK_BIT_SET_RIGHT_LOWER[position]
	}

	q = allpieces & MASK_BIT_UNSET_RIGHT_DOWN[position];
	if q != 0 {
		k |= b.tmpStruct.MASK_BIT_SET_NOBOUND_TMP[position][BITScanForward(q)]
	} else {
		k |= MASK_BIT_SET_RIGHT_UPPER[position]
	}

	return k;
}
func ( b Bitboard ) getCombination(elements uint64) []uint64 {
	var res []uint64;
	for ok := true; ok; ok = (elements != 0) {
		o := BITScanForward(elements);
		res = append(res, uint64(o));
		RESET_LSB(elements);
	}
	return b.getCombination2(res);
}

func ( b Bitboard ) popolateRank() {
	var combinationsRank []uint64;
	for pos := 0; pos < 64; pos++ {
		combinationsRank = b.getCombination(RANK[pos]);
		for _, allpieces := range combinationsRank {
			var idx = b.rankIdx(pos, allpieces);
			b.BITBOARD_RANK[pos][idx] = b.performRankShift(pos, allpieces) | b.performRankCapture(pos, allpieces);
		}
	}
}

func ( b Bitboard ) performRankShift(position int, allpieces uint64) uint64 {
	var q uint64 = allpieces & MASK_BIT_UNSET_RIGHT[position];
	var k uint64;
	if q != 0 {
		k = b.tmpStruct.MASK_BIT_SET_NOBOUND_TMP[position][BITScanForward(q)]
	} else {
		k = MASK_BIT_SET_ORIZ_LEFT[position]
	}

	q = allpieces & MASK_BIT_UNSET_LEFT[position];
	if q != 0 {
		k |= b.tmpStruct.MASK_BIT_SET_NOBOUND_TMP[position][BITScanReverse(q)]
	} else {
		k |= MASK_BIT_SET_ORIZ_RIGHT[position]
	}

	return k;
}
func ( b Bitboard )performColumnCapture(position int, allpieces uint64) uint64 {
	var q uint64;
	var k uint64 = 0;
	var x uint64 = allpieces & FILE_[position];
	q = x & MASK_BIT_UNSET_UP[position];
	if (q != 0 && 0 != allpieces & POW2[BITScanReverse(q)]) {
		k |= POW2[BITScanReverse(q)];
	}
	q = x & MASK_BIT_UNSET_DOWN[position];
	if (q != 0 && 0 != allpieces & POW2[BITScanForward(q)]) {
		k |= POW2[BITScanForward(q)];
	}
	return k;
}
func ( b Bitboard )performRankCapture(position int, allpieces uint64) uint64 {
	var q uint64;
	var k uint64 = 0;
	var x uint64 = allpieces & RANK[position];

	q = x & MASK_BIT_UNSET_LEFT[position];
	if (q != 0 && 0 != allpieces & POW2[BITScanReverse(q)]) {
		k |= POW2[BITScanReverse(q)];
	}
	q = x & MASK_BIT_UNSET_RIGHT[position];
	if (q != 0 && 0 != allpieces & POW2[BITScanForward(q)]) {
		k |= POW2[BITScanForward(q)];
	}
	return k;
}

func ( b Bitboard )performColumnShift(position int, allpieces uint64) uint64 {
	var q uint64 = allpieces & MASK_BIT_UNSET_UP[position];
	var k uint64;
	if q != 0 {
		k = b.tmpStruct.MASK_BIT_SET_NOBOUND_TMP[position][BITScanReverse(q)]
	} else {
		k = MASK_BIT_SET_VERT_LOWER[position]
	}

	q = allpieces & MASK_BIT_UNSET_DOWN[position];
	if q != 0 {
		k |= b.tmpStruct.MASK_BIT_SET_NOBOUND_TMP[position][BITScanForward(q)]
	} else {
		k |= MASK_BIT_SET_VERT_UPPER[position]
	}

	return k;
}


